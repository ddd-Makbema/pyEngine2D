{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pyEngine2D Welcome Welcome to pyEngine docs (seperate from pyEngine3D) These docs will contain the functions nessesary to write 2D games in the engine with definitions of many main terms. These docs are orginized into general folders of topics such as the physics engine or basic rendering. Getting Started 1: Use the package manager pip to install pygame to allow it to work. pip install pygame 2: look at Variables to see the basics of how to initialize game objects 3: learn how to write scripts, add media and initialize game objects by making a basic pong game in the Tutorial 4: for indepth descriptions of how the engine works look at MainFiles 5: to look at what attributes are in the builtin scripts and also what they do, look at Builtins","title":"pyEngine2D"},{"location":"#pyengine2d","text":"","title":"pyEngine2D"},{"location":"#welcome","text":"Welcome to pyEngine docs (seperate from pyEngine3D) These docs will contain the functions nessesary to write 2D games in the engine with definitions of many main terms. These docs are orginized into general folders of topics such as the physics engine or basic rendering.","title":"Welcome"},{"location":"#getting-started","text":"1: Use the package manager pip to install pygame to allow it to work. pip install pygame 2: look at Variables to see the basics of how to initialize game objects 3: learn how to write scripts, add media and initialize game objects by making a basic pong game in the Tutorial 4: for indepth descriptions of how the engine works look at MainFiles 5: to look at what attributes are in the builtin scripts and also what they do, look at Builtins","title":"Getting Started"},{"location":"Definitions/","text":"Definitions Game Engine Terminology GameObject The main objects manipulated during runtime Used for: - Event handling - Rendering images on the screen - Calling other scripts Screen Where the game is rendered Transform Attributes Parent Set as the origin for where the image is rendered multiplies the scale by the parent's scale adds the rotation to the parent's rotation adds the coords of the image to the parent's when the parent is rotated the child is rotated around it Sprite The image loaded and transformed that is put on the screen Frame/FPS The Screen refreshing to update with physics and other changes Fps is how fast the updates happen Fixed FPS Will be ran a set amount of times a second. Good for physics and computations where you do not want everything to go super speedy if someone is using a faster computer","title":"Definitions"},{"location":"Definitions/#definitions","text":"","title":"Definitions"},{"location":"Definitions/#game-engine-terminology","text":"","title":"Game Engine Terminology"},{"location":"Definitions/#gameobject","text":"The main objects manipulated during runtime Used for: - Event handling - Rendering images on the screen - Calling other scripts","title":"GameObject"},{"location":"Definitions/#screen","text":"Where the game is rendered","title":"Screen"},{"location":"Definitions/#transform","text":"Attributes","title":"Transform"},{"location":"Definitions/#parent","text":"Set as the origin for where the image is rendered multiplies the scale by the parent's scale adds the rotation to the parent's rotation adds the coords of the image to the parent's when the parent is rotated the child is rotated around it","title":"Parent"},{"location":"Definitions/#sprite","text":"The image loaded and transformed that is put on the screen","title":"Sprite"},{"location":"Definitions/#framefps","text":"The Screen refreshing to update with physics and other changes Fps is how fast the updates happen","title":"Frame/FPS"},{"location":"Definitions/#fixed-fps","text":"Will be ran a set amount of times a second. Good for physics and computations where you do not want everything to go super speedy if someone is using a faster computer","title":"Fixed FPS"},{"location":"Builtins/RigidBody2D/","text":"RigidBody2D","title":"RigidBody2D"},{"location":"Builtins/RigidBody2D/#rigidbody2d","text":"","title":"RigidBody2D"},{"location":"Builtins/Transform/","text":"Transform","title":"Transform"},{"location":"Builtins/Transform/#transform","text":"","title":"Transform"},{"location":"Builtins/Collisions/Colliders2D/","text":"Colliders2D","title":"Colliders2D"},{"location":"Builtins/Collisions/Colliders2D/#colliders2d","text":"","title":"Colliders2D"},{"location":"Builtins/Collisions/CollisionHandler/","text":"CollisionHandler","title":"CollisionHandler"},{"location":"Builtins/Collisions/CollisionHandler/#collisionhandler","text":"","title":"CollisionHandler"},{"location":"MainFiles/Exceptions/","text":"Exceptions","title":"Exceptions"},{"location":"MainFiles/Exceptions/#exceptions","text":"","title":"Exceptions"},{"location":"MainFiles/GameLoop/","text":"Main Game Loop","title":"Main Game Loop"},{"location":"MainFiles/GameLoop/#main-game-loop","text":"","title":"Main Game Loop"},{"location":"MainFiles/Screen/","text":"Screen Starts the screen for the game and initializes default variables. Attributes attribute discription width The width in pixels of the game screen by default. It can be still set to fullscreen height The height in pixels of the game screen by default. It can still be set to fullscreen fixed_fps/ffps How fast the physics updates. will remain eventually consistent no matter the speed of the computer fps How fast the screen updates. Can be variable but aims for the set amount name_window The name displayed at the top of the screen and in the taskbar icon Image from the data folder displayed at the top left of the window. does not change the image in the taskbar screen Instance of the screen loaded from pygame clock Instance of the clock class loaded from pygame allows fps monitering start_velocity default value of (0,0) to put in for velocity white rgb value for white to easily color shapes or fill the backround of the screen with black same but for black red same but for red green same but for green blue same but for blue Functions frame_end: Updates the screen for the new frame Useage Users should not have to touch the frame_end function. Users shold, though, feel free to access the Screen class when adding basic shapes to the screen and accessing the colors.","title":"Screen"},{"location":"MainFiles/Screen/#screen","text":"Starts the screen for the game and initializes default variables.","title":"Screen"},{"location":"MainFiles/Screen/#attributes","text":"attribute discription width The width in pixels of the game screen by default. It can be still set to fullscreen height The height in pixels of the game screen by default. It can still be set to fullscreen fixed_fps/ffps How fast the physics updates. will remain eventually consistent no matter the speed of the computer fps How fast the screen updates. Can be variable but aims for the set amount name_window The name displayed at the top of the screen and in the taskbar icon Image from the data folder displayed at the top left of the window. does not change the image in the taskbar screen Instance of the screen loaded from pygame clock Instance of the clock class loaded from pygame allows fps monitering start_velocity default value of (0,0) to put in for velocity white rgb value for white to easily color shapes or fill the backround of the screen with black same but for black red same but for red green same but for green blue same but for blue","title":"Attributes"},{"location":"MainFiles/Screen/#functions","text":"frame_end: Updates the screen for the new frame","title":"Functions"},{"location":"MainFiles/Screen/#useage","text":"Users should not have to touch the frame_end function. Users shold, though, feel free to access the Screen class when adding basic shapes to the screen and accessing the colors.","title":"Useage"},{"location":"MainFiles/Variables/","text":"Variables One of the main files that the user interacts with. This is where the user initializes the Screen and Game Objects Initializing The Objects In depth explanations of both methods can be found in game objects and Screen In short to make a new game object you need to just run the function, no need to save it as a variable. #GameObject(name ,screen, sprite, parent, packages) GameObject(\"test_object\" ,screen.screen, \"test.png\", \"origin\", \"transform.Transform\") For the screen, you do need to save it as a variable, \"screen\" # screen = Init(width, height, fps, ffps, icon, name_window) screen = Init(300, 280, 60, 100, \"test.png\", \"myGame\") Loading Scripts To load a new script, make sure the script is in the \"user\" folder in \"scripts\" Then after the \"parent\" paramater, add as many scripts as you would like by listing the file its in then the class name. eg. \"transform.Transform\" or \"Collider2D.RectangleCollider2D\" Setting the Attributes To set the attributes, you need to call the name you set the game object to when initializing it from a list. Then you can call the class using an attribute added to the game object class which is an instance of the script class. Using that you can access and modify all the attributes of the script. GO.GAME_OBJECTS[\"test_object\"].Transform.rotation = 90","title":"Variables"},{"location":"MainFiles/Variables/#variables","text":"One of the main files that the user interacts with. This is where the user initializes the Screen and Game Objects","title":"Variables"},{"location":"MainFiles/Variables/#initializing-the-objects","text":"In depth explanations of both methods can be found in game objects and Screen In short to make a new game object you need to just run the function, no need to save it as a variable. #GameObject(name ,screen, sprite, parent, packages) GameObject(\"test_object\" ,screen.screen, \"test.png\", \"origin\", \"transform.Transform\") For the screen, you do need to save it as a variable, \"screen\" # screen = Init(width, height, fps, ffps, icon, name_window) screen = Init(300, 280, 60, 100, \"test.png\", \"myGame\")","title":"Initializing The Objects"},{"location":"MainFiles/Variables/#loading-scripts","text":"To load a new script, make sure the script is in the \"user\" folder in \"scripts\" Then after the \"parent\" paramater, add as many scripts as you would like by listing the file its in then the class name. eg. \"transform.Transform\" or \"Collider2D.RectangleCollider2D\"","title":"Loading Scripts"},{"location":"MainFiles/Variables/#setting-the-attributes","text":"To set the attributes, you need to call the name you set the game object to when initializing it from a list. Then you can call the class using an attribute added to the game object class which is an instance of the script class. Using that you can access and modify all the attributes of the script. GO.GAME_OBJECTS[\"test_object\"].Transform.rotation = 90","title":"Setting the Attributes"},{"location":"MainFiles/GameObject/GameObject/","text":"Game Object Main class to hold all the event handlers of the engine including user made packages. More in depth This is where the hub of most of your game will run. This has built in functions that are called from main or packages such as colliders. When these functions are called, they will rarely do anything on their own, but instead try to call the function for all the packages listed in that game object. For each package, it will see if it has that package and if so, run the function in that package. It also currently takes care of handling the sprite using the information given from transform and giving the rendering information to the main loop . Eventually this feature will be moved to its own package in builtins , but that has not happened yet. Attributes Class Attributes Attribute discription INSTANCES A list of all the instances of game objects NAMES A list of the user-input names of the game objects GAME_OBJECTS A dictionary allowing the user to lookup any instance using any name ### Instance Attributes Attribute discription ---- ---- name The name this game object will be referenced by screen The instance of the screen loaded from the screen sprite The name of the sprite to load from the data folder parent Transforms the game object to this game object's local scale packages All the user made or builtin packages in the scripts folder to put in for this game object #### Auto-set Attribute discription ---- ---- image_start The original image loaded from data with no transforms on it package_instances list of all the instances of packages to turn them into attributes parent_instance the instance of the parent game object to access its transform and other key values Methods Method discription","title":"Game Object"},{"location":"MainFiles/GameObject/GameObject/#game-object","text":"Main class to hold all the event handlers of the engine including user made packages.","title":"Game Object"},{"location":"MainFiles/GameObject/GameObject/#more-in-depth","text":"This is where the hub of most of your game will run. This has built in functions that are called from main or packages such as colliders. When these functions are called, they will rarely do anything on their own, but instead try to call the function for all the packages listed in that game object. For each package, it will see if it has that package and if so, run the function in that package. It also currently takes care of handling the sprite using the information given from transform and giving the rendering information to the main loop . Eventually this feature will be moved to its own package in builtins , but that has not happened yet.","title":"More in depth"},{"location":"MainFiles/GameObject/GameObject/#attributes","text":"","title":"Attributes"},{"location":"MainFiles/GameObject/GameObject/#class-attributes","text":"Attribute discription INSTANCES A list of all the instances of game objects NAMES A list of the user-input names of the game objects GAME_OBJECTS A dictionary allowing the user to lookup any instance using any name ### Instance Attributes Attribute discription ---- ---- name The name this game object will be referenced by screen The instance of the screen loaded from the screen sprite The name of the sprite to load from the data folder parent Transforms the game object to this game object's local scale packages All the user made or builtin packages in the scripts folder to put in for this game object #### Auto-set Attribute discription ---- ---- image_start The original image loaded from data with no transforms on it package_instances list of all the instances of packages to turn them into attributes parent_instance the instance of the parent game object to access its transform and other key values","title":"Class Attributes"},{"location":"MainFiles/GameObject/GameObject/#methods","text":"Method discription","title":"Methods"},{"location":"MainFiles/GameObject/Attributes/ClassAttributes/GAME_OBJECTS/","text":"","title":"GAME OBJECTS"},{"location":"MainFiles/GameObject/Attributes/ClassAttributes/INSTANCES/","text":"","title":"INSTANCES"},{"location":"MainFiles/GameObject/Attributes/ClassAttributes/NAMES/","text":"","title":"NAMES"},{"location":"MainFiles/GameObject/Attributes/InstanceAttributes/packages/","text":"","title":"Packages"},{"location":"MainFiles/GameObject/Attributes/InstanceAttributes/parent/","text":"","title":"Parent"},{"location":"MainFiles/GameObject/Attributes/InstanceAttributes/sprite/","text":"","title":"Sprite"},{"location":"MainFiles/GameObject/Methods/PackageFunctionCalls/","text":"","title":"PackageFunctionCalls"},{"location":"MainFiles/GameObject/Methods/TimedFunctionCalls/","text":"","title":"TimedFunctionCalls"},{"location":"Tutorial/Introduction/","text":"","title":"Introduction"}]}